---
import Layout from "../layouts/Layout.astro";

const STRIPE_PUBLISHABLE_KEY = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
---

<Layout title="Welcome to Payments.">
  <main>
    <h1>Welcome to <span class="text-gradient">Payments</span></h1>
    <h2>License usage for Seoder</h2>
    <p>The license is active for 1 year with up to 3 seats</p>
    <form id="register">
      <label for="first-name"> First name</label>
      <br />
      <input
        type="text"
        name="first-name"
        id="first-name"
        value="Elliot"
        required
      />
      <br />
      <label for="last-name"> Last name</label>
      <br />
      <input
        type="text"
        name="last-name"
        id="last-name"
        value="Alderson"
        required
      />
      <br />
      <label for="email"> Email</label>
      <br />
      <input
        type="email"
        name="email"
        id="email"
        value="elliot@example.com"
        required
      />
      <br />
      <label for="password"> Password</label>
      <br />
      <input
        type="password"
        name="password"
        id="password"
        value="fsociety"
        required
      />
      <br />
      <br />
      <button type="submit"> Buy Now</button>
    </form>
  </main>

  <script src="https://checkout.stripe.com/checkout.js" is:inline></script>

  <script defer is:inline define:vars={{ STRIPE_PUBLISHABLE_KEY }}>
    const register = document.getElementById("register");

    const handler = StripeCheckout.configure({
      key: STRIPE_PUBLISHABLE_KEY,
      token: async ({ id: stripeToken }) => {
        const attributes = {
          firstName: document.getElementById("first-name").value,
          lastName: document.getElementById("last-name").value,
          email: document.getElementById("email").value,
          password: document.getElementById("password").value,
          metadata: { stripeToken }, // Temporarily store this so our webhooks can do their thing
        };

        // Create the Keygen user [todo: move to SS]
        const response = await fetch(`/api/keygen-account`, {
          method: "POST",
          headers: {
            "Content-Type": "application/vnd.api+json",
            Accept: "application/vnd.api+json",
          },
          body: JSON.stringify({
            data: attributes,
          }),
        });

        const { data, errors } = await response.json();

        if (errors) {
          const message = errors.map((e) => e.detail).toString();

          register.parentNode.innerHTML = `An error occurred during user creation: ${message} (double check your ENV vars)`;

          throw new Error(message);
        }

        // All good! The webhooks will handle the rest. :)
        register.parentNode.innerHTML = `Thanks for your purchase, ${data.attributes.firstName}! ðŸ‘ŠðŸ’¥`;
      },
    });

    register.addEventListener("submit", (event) => {
      event.preventDefault();

      handler.open({
        panelLabel: "Buy License",
        name: "Seoder",
        image: "/favicon.svg",
        amount: 20000,
      });
    });
  </script>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>

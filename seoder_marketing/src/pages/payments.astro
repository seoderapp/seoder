---
import Navbar from "../components/Navbar.astro";
import Layout from "../layouts/Layout.astro";

const STRIPE_PUBLISHABLE_KEY = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
---

<Layout title="Welcome to Payments.">
  <main>
    <Navbar target={"payments"} />
    <div class={"prog"}>
      <h1><span class="text-gradient">Purchase License</span></h1>
      <h2>License for Seoder</h2>
      <p>The license is active for 1 year with up to 3 seats</p>
      <form id="register">
        <div>
          <label for="first-name">First name</label>
          <input
            type="text"
            name="first-name"
            id="first-name"
            placeholder="Elliot"
            required
          />
        </div>
        <div>
          <label for="last-name">Last name</label>
          <input
            type="text"
            name="last-name"
            id="last-name"
            placeholder="Alderson"
            required
          />
        </div>
        <div>
          <label for="email">Email</label>
          <input
            type="email"
            name="email"
            id="email"
            placeholder="elliot@example.com"
            required
          />
        </div>
        <div class="button-container">
          <button type="submit">Buy Now</button>
        </div>
      </form>
    </div>
  </main>

  <script src="https://checkout.stripe.com/checkout.js" is:inline></script>

  <script defer is:inline define:vars={{ STRIPE_PUBLISHABLE_KEY }}>
    const register = document.getElementById("register");

    const handler = StripeCheckout.configure({
      key: STRIPE_PUBLISHABLE_KEY,
      token: async ({ id: stripeToken }) => {
        const attributes = {
          firstName: document.getElementById("first-name").value,
          lastName: document.getElementById("last-name").value,
          email: document.getElementById("email").value,
          metadata: { stripeToken }, // Temporarily store this so our webhooks can do their thing
        };

        const response = await fetch(`/api/keygen-account`, {
          method: "POST",
          headers: {
            "Content-Type": "application/vnd.api+json",
            Accept: "application/vnd.api+json",
          },
          body: JSON.stringify({
            data: attributes,
          }),
        });

        const { data, errors } = await response.json();

        if (errors) {
          const message = errors.map((e) => e.detail).toString();

          register.parentNode.innerHTML = `An error occurred during user creation: ${message} (double check your ENV vars)`;

          throw new Error(message);
        }

        register.parentNode.innerHTML = `Thanks for your purchase, ${data.attributes.firstName}! ðŸš€`;
      },
    });

    register.addEventListener("submit", (event) => {
      event.preventDefault();

      handler.open({
        panelLabel: "Buy License",
        name: "Seoder",
        image: "/logo.svg",
        amount: 20000,
      });
    });
  </script>
</Layout>

<style>
  main {
    margin: auto;
    position: relative;
    max-width: 100ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
  form {
    padding: 0.6rem 0;
  }
  form label {
    display: block;
    padding: 0.3rem 0px;
  }
  form input {
    border-radius: 0.3rem;
    padding: 0.5rem 0.8rem;
    border: 1px solid #ccc;
    min-width: 15rem;
  }
  .button-container {
    padding: 1rem 0;
  }
  .prog {
    padding: 1.5rem;
  }
  .button-container button {
    text-transform: uppercase;
    color: #2f2768;
    border: 2px solid #2f2768;
    padding: 0.5rem 0.8rem;
    border-radius: 0.3rem;
    min-width: 16.8rem;
    margin: 0;
  }
  .button-container button:hover {
    border-color: #4b3dbb;
  }
</style>

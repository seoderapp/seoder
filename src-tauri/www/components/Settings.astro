---
import LicenseInput from "./LicenseInput";
import SettingsBar from "./SettingsBar.astro";
import Switch from "./Switch.astro";
---

<div id="settings-container" class="hidden">
  <div class="modal-outer">
    <div class="modal">
      <SettingsBar title={"Settings"} />

      <div id="proxyform" class="ph frame flex-row center-align gap">
        <label for="proxy-select">Use Proxy</label>
        <Switch id="proxy-select" name={"proxy"} />
      </div>

      <div id="torform" class="ph frame flex-row center-align gap">
        <label for="tor-select">Use Tor</label>
        <Switch id="tor-select" name={"proxy"} />
      </div>

      <div id="lowpowerform" class="ph frame flex-row center-align gap">
        <label for="lowpower-select">Low Power</label>
        <Switch id="lowpower-select" name={"proxy"} />
      </div>

      <form class="ph frame flex-row center-align">
        <label for="target-select">Target</label>
        <div class="ph">
          <select name="target" id="target-select"></select>
        </div>
        <div class="flex align-end">
          <div>
            <button type="button" class="button" id="fs-delete">Delete</button>
          </div>
        </div>
      </form>

      <form
        id="uploadform"
        class="ph frame flex-row center-align"
        enctype="multipart/form-data"
        method="post"
      >
        <label for="file">Crawl list</label>
        <div class="ph">
          <input type="file" accept=".txt" name="file" />
        </div>
        <button class="btn-primary button" type="submit">Upload</button>
      </form>

      <form id="ulicense" class="ph">
        <LicenseInput client:visible />
      </form>
    </div>
  </div>
</div>

<script>
  import { socket } from "../events/sockets";

  import { selectedFileOptionMutate } from "../utils/file-set";

  const ulicense = document.getElementById("ulicense");

  ulicense?.addEventListener("submit", (event) => {
    event.preventDefault();
    const slicense: HTMLInputElement = ulicense.querySelector(
      'input[name="license"]'
    );

    if (slicense && slicense.value) {
      socket.send("set-license " + slicense.value);
    } else {
      window.alert("Please enter a license.");
    }
  });

  const uploadform = document.getElementById("uploadform");
  uploadform?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const url = "http://localhost:7050/upload";
    const request = new XMLHttpRequest();
    request.open("POST", url, true);
    request.onload = function () {};
    request.onerror = function () {
      // request failed
    };
    const fileValue = event.target["file"].value;
    if (fileValue) {
      request.send(new FormData(event.target as HTMLFormElement));
      const optimisticPath = fileValue.replace(/^.*[\\\/]/, "");

      selectedFileOptionMutate({
        path: optimisticPath,
      });
    }
  });
</script>

<style>
  .button {
    border-radius: 4px;
    border: 0;
    background-color: #ebecf2;
    color: #2f2768;
    gap: 8px;
    font-weight: 600;
  }

  label:not(.switch) {
    font-style: normal;
    font-weight: 700;
    font-size: 1rem;
    color: #2f2768;
    padding-left: 1rem;
    min-width: 7.3rem;
    text-align: left;
  }

  .gap {
    gap: 1rem;
  }
</style>

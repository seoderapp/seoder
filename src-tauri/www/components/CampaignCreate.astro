---
import SettingsBar from "./SettingsBar.astro";
---

<div id="campaign-create-form" class="hidden">
  <div class="modal-outer">
    <div class="modal">
      <SettingsBar title={"New Campaign"} />
      <div>
        <form id="eform">
          <div class="form-container">
            <div>
              <label for="ename">Name</label>
              <input
                name="ename"
                placeholder="engine name"
                type="text"
                class="form-control"
              />
            </div>
            <div>
              <label for="epatterns">Patterns</label>
              <input
                name="epatterns"
                placeholder="bitcoin, motorcycles, *cats*"
                type="text"
                class="form-control"
              />
            </div>
            <div class="seperator">
              <span></span>
            </div>
            <div class="optional">Optional</div>
            <div class="seperator-sm"></div>
            <div>
              <label for="epaths">Paths</label>
              <input
                name="epaths"
                placeholder="/home, /welcome, /about"
                type="text"
                class="form-control"
              />
            </div>
          </div>
          <div class="gutter-t">
            <button type="submit" class="button btn-primary full-w"
              >Add Campaign</button
            >
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  import { socket } from "../events/sockets";
  import { engines } from "../stores/engine";

  const eform = document.getElementById("eform");
  const campaignCreateForm = document.getElementById("campaign-create-form");

  eform?.addEventListener("submit", (event) => {
    const engine: HTMLInputElement = eform.querySelector('input[name="ename"]');
    const epaths: HTMLInputElement = eform.querySelector(
      'input[name="epaths"]'
    );
    const epatterns: HTMLInputElement = eform.querySelector(
      'input[name="epatterns"]'
    );

    if (engine && engine.value) {
      const m = JSON.stringify({
        name: engine.value,
        paths: epaths.value.length ? epaths.value : "/",
        patterns: epatterns.value,
      });

      campaignCreateForm.className = "hidden";

      if (engines.get()[m]) {
        window.alert("Please enter a different engine name.");
      } else {
        socket.send("create-engine " + m);
        // todo: send new engine created on submit or add optimistic update
        socket.send("list-engines");
      }
    } else {
      window.alert("Please enter the engine name.");
    }
    event.preventDefault();
  });
</script>
<style>
  .modal {
    min-width: 20rem;
    text-align: left;
  }

  .form-container {
    padding-left: 1.25rem;
    padding-right: 1.25rem;
  }

  .button {
    border: 0;
    background-color: #ebecf2;
    color: #2f2768;
    gap: 8px;
    font-weight: 600;
    padding: 0.7rem;
  }

  label {
    font-style: normal;
    font-weight: 700;
    font-size: 1rem;
    color: #2f2768;
    text-align: left;
    display: block;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .gap {
    gap: 1rem;
  }

  .form-control {
    width: 90%;
  }

  .seperator {
    padding-top: 1rem;
    padding-bottom: 1rem;
    display: flex;
    justify-content: center;
  }

  .seperator-sm {
    padding-top: 0.3rem;
    padding-bottom: 0.3rem;
  }

  .seperator span {
    height: 1px;
    background-color: #2f2768;
    width: 100%;
  }

  .optional {
    font-size: 0.8rem;
    color: #2f2768;
    border-radius: 0.3rem;
    padding: 0.3rem 0.8rem;
    border: 1px solid #2f2768;
    text-align: center;
    display: inline;
  }
</style>

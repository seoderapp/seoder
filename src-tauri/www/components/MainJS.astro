<script>
  declare global {
    var __TAURI__: any;
  }

  const cpuCanvas = document.getElementById("cpu-stats") as HTMLCanvasElement;
  const memCanvas = document.getElementById(
    "memory-stats"
  ) as HTMLCanvasElement;

  const ctx = cpuCanvas?.getContext("2d");
  const ctx2 = memCanvas?.getContext("2d");

  function createCanv(r) {
    r.font = "2rem SF Mono";
    r.lineWidth = 17;
    r.fontWeight = 700;
    r.fillStyle = "#2f2768";
    r.strokeStyle = "#E8C01A";
    r.textAlign = "center";
  }

  if (ctx) {
    createCanv(ctx);
  }
  if (ctx2) {
    createCanv(ctx2);
  }

  function setProgress(ele, diff) {
    let cw = ele.canvas.width;
    let ch = ele.canvas.height;
    ele.clearRect(0, 0, cw, ch);
    ele.fillText(diff.toFixed(0) + "%", cw * 0.52, ch * 0.5 + 5, cw + 12);
    ele.beginPath();
    ele.arc(100, 100, 75, 0, (Math.PI * diff) / 50);
    ele.stroke();
  }

  const units = ["bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];

  function slowBytes(x) {
    let l = 0;
    let n = parseInt(x, 10) || 0;

    while (n >= 1024 && ++l) {
      n = n / 1024;
    }

    return n.toFixed(n < 10 && l > 0 ? 1 : 0) + " " + units[l];
  }

  const socket = new WebSocket("ws://127.0.0.1:8080");
  const socketRuntime = new WebSocket("ws://127.0.0.1:8089"); // feed loop

  socketRuntime.addEventListener("open", () => {
    socketRuntime.send("loop");
  });

  socket.addEventListener("open", () => {
    socket.send("list-engines");
    socket.send("list-totals");
    socket.send("list-files");
    socket.send("feed");
    socket.send("config");

    setTimeout(() => {
      socket.send("list-campaign-stats");
    });
  });

  const netstats = document.getElementById("network-stats");
  const logfeed = document.getElementById("feed-log");
  const list = document.getElementById("engine-list");
  // settings
  const settingsContainer = document.getElementById("settings-container");
  const settingsBtn = document.getElementById("settings-button");
  // modals
  const settingsBtnCls = document.getElementById("settings-button-close");
  const campaignBtnCls = document.getElementById("campaign-button-close");
  // new create
  const newCampaignButton = document.getElementById("new-campaign-button");
  const campaignCreateForm = document.getElementById("campaign-create-form");
  // empty selectors
  const emptyList = document.getElementById("empty-list");
  const feedEmpty = document.getElementById("feed-start");

  if (list && !list.children.length) {
    emptyList.className = "block";
  }

  if (logfeed && !logfeed.children.length) {
    feedEmpty.className = "block";
  }

  // license control
  const program = document.getElementById("appProgram");
  const elicense = document.getElementById("elicense");

  newCampaignButton?.addEventListener("click", () => {
    campaignCreateForm.className = "block";
  });

  settingsBtn?.addEventListener("click", () => {
    settingsContainer.className = "block";
  });

  settingsBtn?.addEventListener("click", () => {
    settingsContainer.className = "block";
  });

  campaignBtnCls?.addEventListener("click", () => {
    campaignCreateForm.className = "hidden";
  });

  settingsBtnCls?.addEventListener("click", () => {
    settingsContainer.className = "hidden";
  });

  let selected = "";

  if (program && localStorage.getItem("authed")) {
    program.className = "row block";
  } else if (elicense) {
    elicense.className = "row block";
  }

  // files for uploading
  const fileMap = new Map();
  // engine map
  const engineMap = new Map();

  let initialTarget = "";

  // todo toggle license button on main form

  /*
   * List of web socket matchers * special for high performance
   */
  const bftc = "{" + '"' + "buffer" + '"'; // buffer
  const ptp = "{" + '"' + "pengine" + '"' + ":" + '"'; // engine
  const selectFile = "{" + '"' + "fpath" + '"' + ":" + '"'; // selected file
  const ptpe = "{" + '"' + "epath" + '"' + ":" + '"'; // engine created
  const ptc = "{" + '"' + "count" + '"'; // file count
  const dfpath = "{" + '"' + "dfpath" + '"'; // deleted file
  const deptc = "{" + '"' + "depath" + '"'; // deleted campaign
  const cfin = "{" + '"' + "finished" + '"'; // crawl finished

  // defaults for program entry
  let defaultOptionSet = false;

  function eventSub(event) {
    const raw = event.data;

    // license handling
    if (raw.startsWith("{" + '"' + "license")) {
      const data = JSON.parse(raw);
      const { license } = data || {};
      // set local storage of license enabled and display view
      if (license) {
        if (program) {
          program.className = "row";
        }
        if (elicense) {
          elicense.className = "row hidden";
        }
        localStorage.setItem("authed", "true");
      } else {
        window.alert("License is invalid");

        if (program) {
          program.className = "row hidden";
        }

        if (elicense) {
          elicense.className = "row";
        }

        localStorage.removeItem("authed");
      }
    }

    if (raw.startsWith("{" + '"' + "stats")) {
      const data = JSON.parse(raw);
      const {
        cpu_usage,
        // load_avg_min,
        network_received,
        network_transmited,
        network_total_transmitted,
        memory_free,
        // memory_used,
        memory_total,
      } = data.stats;

      if (ctx) {
        setProgress(ctx, cpu_usage);
      }
      if (ctx2) {
        setProgress(ctx2, (memory_free / memory_total) * 100);
      }

      if (netstats) {
        netstats.innerHTML =
          slowBytes(network_received) +
          " | " +
          slowBytes(network_transmited) +
          " | " +
          slowBytes(network_total_transmitted);
      }

      return;
    }

    if (cfin) {
      const data = JSON.parse(raw);
      const { finished, time } = data || {};

      const cellStatus = document.getElementById("engine_status_" + finished);

      if (cellStatus) {
        cellStatus.textContent = "Finished";
        cellStatus.className = "engine-status engine-status-finished";
        console.log(time);
      }
    }

    if (raw.startsWith(ptp)) {
      const np = JSON.parse(raw);
      const { pengine, ploc } = np || {};

      if (engineMap.has(pengine)) {
        const item = engineMap.get(pengine);
        item.total = ploc ?? item.total ?? 0;
        item.valid = item.valid ?? 0;

        const cell = document.getElementById("engine_stats_" + pengine);

        if (cell) {
          cell.textContent = item.valid + " / " + item.total;
        }
      }
      return;
    }

    if (raw.startsWith("{" + '"' + "path" + '"' + ":" + '"')) {
      const np = JSON.parse(raw);
      const { url, path } = np || {};

      if (engineMap.has(path)) {
        const item = engineMap.get(path);

        // todo: swap current log
        if (url && item.urls && !item.urls.has(url)) {
          item.urls.add(url);

          if (logfeed) {
            const logc = document.createElement("li");
            logc.innerText = url;

            logfeed.appendChild(logc);
          }
        }
      }
      return;
    }

    if (raw.startsWith(selectFile)) {
      const np = JSON.parse(raw);
      const path = np && np.fpath;

      if (!fileMap.has(path)) {
        fileMap.set(path, {});
        // file select
        const fileSelect = document.getElementById("target-select");

        if (fileSelect) {
          if (initialTarget) {
            const kid = "fskeys_" + initialTarget;
            const item = document.getElementById(kid);
            if (!item) {
              const cellSelect: HTMLOptionElement =
                document.createElement("option");

              cellSelect.id = kid;
              // @ts-ignore
              cellSelect.name = "fsselect";
              cellSelect.value = initialTarget;
              cellSelect.innerText = initialTarget;

              fileSelect.appendChild(cellSelect);
            }
          }

          for (const [key, _] of fileMap) {
            if (key !== initialTarget) {
              const kid = "fskeys_" + key;
              const item = document.getElementById(kid);

              if (!item) {
                const cellSelect: HTMLOptionElement =
                  document.createElement("option");

                cellSelect.id = kid;
                // @ts-ignore
                cellSelect.name = "fsselect";
                cellSelect.value = key;
                cellSelect.innerText = key;

                fileSelect.appendChild(cellSelect);
              }
            }
          }
        }
      }
      return;
    }

    if (raw.startsWith(ptpe)) {
      const np = JSON.parse(raw);
      const path = np && np.epath;

      if (!engineMap.has(path)) {
        if (list && !list.children.length) {
          emptyList.className = "hidden";
        }

        engineMap.set(path, {
          total: 0,
          valid: 0,
          urls: new Set(),
        });

        // exit if list does not exist
        if (!list) {
          return;
        }

        const cell = document.createElement("li");
        // click wrapper
        const cellButtonWrapper = document.createElement("button");
        // inner wrapper
        const cellInnerContainer = document.createElement("div");

        const cellBtnBlock = document.createElement("div");
        const cellContentBlock = document.createElement("div");
        const cellContentPaths = document.createElement("div");
        const cellTitle = document.createElement("div");
        const cellStats = document.createElement("div");
        // run button
        const cellBtnRunButton = document.createElement("button");
        const cellBtnRunText = document.createElement("div");
        const cellBtnRunImage = document.createElement("img");
        // export button
        const cellBtnExportButton = document.createElement("button");
        const cellBtnExportText = document.createElement("div");
        const cellBtnExportImage = document.createElement("img");
        // delete button
        const cellBtnDeleteText = document.createElement("div");
        const cellBtnDeleteRemoveImage = document.createElement("img");
        const cellBtnDeleteButton = document.createElement("button");

        const cellRightBlock = document.createElement("div");
        // status code
        const cellStatus = document.createElement("div");
        cellStatus.id = "engine_status_" + path;
        cellStatus.textContent = "Ready";
        cellStatus.className = "engine-status";
        cell.className = "engine-item";
        cellButtonWrapper.className = "cell-btn";
        cellBtnBlock.className = "row gutter-t full-w-120";
        cellInnerContainer.className = "row full-w";
        cellBtnDeleteButton.className = "btn-base active-delete";

        cell.id = "engine_" + path;
        cellStats.id = "engine_stats_" + path;

        cellContentPaths.className = "row";
        cellContentBlock.className = "flex";
        cellTitle.className = "engine-title";
        cellStats.className = "engine-stats";

        cellTitle.textContent = path;
        cellContentPaths.textContent = np.paths;
        cellStats.textContent = "0 / 0";

        cellBtnRunText.textContent = "Run";
        cellBtnRunImage.src = "/assets/unpause.svg";
        cellBtnRunButton.className = "btn-base";

        cellBtnExportText.textContent = "Export data";
        cellBtnExportImage.src = "/assets/export.svg";
        cellBtnExportButton.className = "btn-base";

        cellBtnDeleteText.textContent = "Delete";
        cellBtnDeleteRemoveImage.src = "/assets/trashcan.svg";

        cellBtnExportButton.addEventListener("click", async (event) => {
          event.preventDefault();
          event.stopImmediatePropagation();
          const filePath = await window.__TAURI__.dialog.save({
            multiple: false,
            filters: [
              {
                name: path,
                extensions: ["txt"],
              },
            ],
          });

          const url =
            "http://localhost:7050/download/" + path + "/valid/links.txt";
          const request = new XMLHttpRequest();

          // todo: Post endpoint to write to file instead of get
          request.open("GET", url, true);

          request.onload = async function () {
            await window.__TAURI__.fs.writeTextFile(filePath, request.response);
          };

          request.onerror = function () {
            alert("Issue downloading the file.");
          };

          request.send(new FormData());
        });

        cellBtnRunButton.addEventListener("click", (event) => {
          if (engineMap.has(path)) {
            logfeed.replaceChildren();
          }

          socket.send("run-campaign " + path);
          event.preventDefault();
        });

        // todo: replace feed
        cellButtonWrapper.addEventListener("click", (event) => {
          if (engineMap.has(path)) {
            // clear on new select
            if (selected && selected !== path) {
              logfeed.replaceChildren();
              // TODO: replace feed with new links
            }

            if (!logfeed.children.length) {
              feedEmpty.className = "hidden";
            }
          }

          const active = document.getElementsByClassName(
            "cell-btn cell-btn-active"
          );

          if (active) {
            for (let i = 0; i < active.length; i++) {
              active[i].className = "cell-btn";
            }
          }

          selected = path;

          cellButtonWrapper.className = "cell-btn cell-btn-active";
          event.preventDefault();
        });

        cellBtnDeleteButton.addEventListener("click", (event) => {
          if (engineMap.has(path)) {
            engineMap.delete(path);
            logfeed.replaceChildren();
          }

          if (!list.children.length) {
            emptyList.className = "block";
          }

          socket.send("delete-engine " + path);
          cell.remove();
          event.preventDefault();
        });

        cellBtnRunButton.appendChild(cellBtnRunImage);
        cellBtnRunButton.appendChild(cellBtnRunText);

        cellBtnExportButton.appendChild(cellBtnExportImage);
        cellBtnExportButton.appendChild(cellBtnExportText);

        cellBtnDeleteButton.appendChild(cellBtnDeleteRemoveImage);
        cellBtnDeleteButton.appendChild(cellBtnDeleteText);

        // todo: status block
        cellBtnBlock.appendChild(cellBtnRunButton);
        cellBtnBlock.appendChild(cellBtnExportButton);
        cellBtnBlock.appendChild(cellBtnDeleteButton);

        cellContentBlock.appendChild(cellTitle);
        cellContentBlock.appendChild(cellStats);
        cellContentBlock.appendChild(cellContentPaths);
        cellContentBlock.appendChild(cellBtnBlock);

        cellRightBlock.appendChild(cellStatus);

        // left block
        cellInnerContainer.appendChild(cellContentBlock);
        // right block
        cellInnerContainer.appendChild(cellRightBlock);
        // inner base
        cellButtonWrapper.appendChild(cellInnerContainer);
        // button wrapper
        cell.appendChild(cellButtonWrapper);
        list.appendChild(cell);
      }
      return;
    }

    if (raw.startsWith(ptc)) {
      // parse json for now
      const np = JSON.parse(raw);
      const path = np && np.path;

      if (engineMap.has(path)) {
        const item = engineMap.get(path);
        item.total = item.total ?? 0;
        item.valid = np.count ?? item.valid ?? 0;

        const cell = document.getElementById("engine_stats_" + path);

        if (cell) {
          cell.textContent = item.valid + " / " + item.total;
        }
      }
    }

    if (raw.startsWith(dfpath)) {
      const np = JSON.parse(raw);
      const path = np && np.dfpath;

      if (fileMap.has(path)) {
        const kid = "fskeys_" + path;
        const cell = document.getElementById(kid);

        cell.remove();

        fileMap.delete(path);
      }
    }

    if (raw.startsWith(bftc)) {
      // parse json for now
      const np = JSON.parse(raw);

      if (!defaultOptionSet) {
        defaultOptionSet = true;
        initialTarget = np.target;
        const buffer = document.getElementById(
          "buffer-select"
        ) as HTMLOptionElement;
        const proxyform = document.getElementById(
          "proxy-select"
        ) as HTMLInputElement;

        if (buffer) {
          buffer.value = np.buffer;
        }
        if (proxyform) {
          proxyform.checked = np.proxy;
        }
      }
    }

    if (raw.startsWith(deptc)) {
      // parse json for now
      const np = JSON.parse(raw);
      const path = np && np.depath;

      if (engineMap.has(path)) {
        const cell = document.getElementById("engine_" + path);
        const kitem = document.getElementById("ekeys_" + path);

        cell?.remove();
        kitem?.remove();
        engineMap.delete(path);
      }
    }
  }

  socket.addEventListener("message", eventSub);
  socketRuntime.addEventListener("message", eventSub);

  const rsform = document.getElementById("rsform");
  const rform = document.getElementById("rform");
  const eform = document.getElementById("eform");
  const proxyform = document.getElementById("proxyform");
  const uploadform = document.getElementById("uploadform");
  const fsform = document.getElementById("fsform");
  const bufferform = document.getElementById("bufferform");
  const fsDelete = document.getElementById("fs-delete");

  uploadform?.addEventListener("submit", (event) => {
    const url = "http://localhost:7050/upload";
    const request = new XMLHttpRequest();

    request.open("POST", url, true);

    request.onload = function () {
      // console.log(request.responseText);
      // todo: upload complete
    };

    request.onerror = function () {
      // request failed
    };

    request.send(new FormData(event.target as HTMLFormElement));
    event.preventDefault();
  });

  rsform?.addEventListener("submit", (event) => {
    if (selected) {
      if (engineMap.has(selected)) {
        const e = engineMap.get(selected);
        e.url = [];
        // todo: replace it with new selected engine map
        logfeed.replaceChildren();
      }

      const cmp = document.getElementById("engine_status_" + selected);

      if (cmp) {
        cmp.textContent = "Running";
      }

      socket.send("run-campaign " + selected);
    } else {
      alert("Please select a campaign");
    }

    event.preventDefault();
  });

  rform?.addEventListener("submit", (event) => {
    socket.send("run-all-campaigns");
    event.preventDefault();
  });

  bufferform?.addEventListener("submit", (event) => {
    const buffer: HTMLInputElement = bufferform.querySelector(
      'input[name="buffer"]'
    );
    const selected = buffer.value;

    socket.send("set-buffer " + selected);

    event.preventDefault();
  });

  proxyform?.addEventListener("submit", (event) => {
    const prox: HTMLInputElement = proxyform.querySelector(
      'input[name="proxy"]'
    );

    socket.send("set-proxy " + prox.checked);

    event.preventDefault();
  });

  fsDelete?.addEventListener("click", () => {
    const cf = window.confirm("Are, you sure you want to delete this file?");

    if (cf) {
      const campaign: HTMLInputElement = fsform.querySelector(
        'select[name="target"]'
      );
      const selected = campaign.value;

      socket.send("delete-file " + selected);
    }
  });

  fsform?.addEventListener("submit", (event) => {
    const campaign: HTMLInputElement = fsform.querySelector(
      'select[name="target"]'
    );
    const selected = campaign.value;

    if (!selected) {
      window.alert("Please select a list type");
    } else {
      socket.send("set-list " + selected);
    }

    event.preventDefault();
  });

  eform?.addEventListener("submit", (event) => {
    const engine: HTMLInputElement = eform.querySelector('input[name="ename"]');
    const epaths: HTMLInputElement = eform.querySelector(
      'input[name="epaths"]'
    );
    const epatterns: HTMLInputElement = eform.querySelector(
      'input[name="epatterns"]'
    );

    if (engine && engine.value) {
      const m = JSON.stringify({
        name: engine.value,
        paths: epaths.value,
        patterns: epatterns.value,
      });

      if (!list.children.length) {
        emptyList.className = "hidden";
      }

      socket.send("create-engine " + m);
      socket.send("list-engines");
    } else {
      window.alert("Please enter a engine name");
    }
    event.preventDefault();
  });

  elicense?.addEventListener("submit", (event) => {
    const slicense: HTMLInputElement = elicense.querySelector(
      'input[name="license"]'
    );

    if (slicense && slicense.value) {
      socket.send("set-license " + slicense.value);
    } else {
      window.alert("Please enter a license.");
    }
    event.preventDefault();
  });

  const ulicense = document.getElementById("ulicense");

  ulicense?.addEventListener("submit", (event) => {
    const slicense: HTMLInputElement = ulicense.querySelector(
      'input[name="license"]'
    );

    if (slicense && slicense.value) {
      socket.send("set-license " + slicense.value);
    } else {
      window.alert("Please enter a license.");
    }
    event.preventDefault();
  });
</script>
